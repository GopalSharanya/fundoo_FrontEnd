var should = require('should')
	, redis = require('redis')
  , db = require('../lib/ninjazord')
  , rc = redis.createClient();

describe('Ninjazord', function(){
	before(function(){

	});

	describe('helper methods', function(){
		it('prefix setting', function(){
			db.setPrefix('ninjazord.');
			db.getPrefix().should.equal('ninjazord.');
		});
		it('nukeNamespace',function(done){
			rc.set('ninjazord.test', 'apples', function(err,res){
				db.nukeNamespace('ninjazord.',function(res){
					rc.get('ninjazord.test',function(err,res){
						if (err || res) throw 'nukeNamespace not working';
						done();
					});
				});
			});
		});
	});

	describe('Basic Methods', function(){
		it('set', function(done){
			db.set('test', 'value', function(res){
				res.should.equal(true);
				done();
			});
		});
		it('get', function(done){
			db.get('test', function(res){
				res.should.equal('value');
				done();
			});
		});
		it('del', function(done){
			db.del('test', function(res){
				res.should.equal(true);
				db.get('test', function(res){
					res.should.equal(false);
					done();
				});
			});
		});
		it('incr', function(done){
			db.incr('counter', function(res){
				res.should.equal(1);
				done();
			});
		});
	});

	describe('Hash Methods', function(){
		var name = 'hashTest';
		it('setHash', function(done){
			db.setHash(name, {
				key : 'value',
				keyTwo : 0,
				keyThree : 'apples'
			}, function(res){
				res.should.equal(true);
				done();
			});
		});
		it('getHash', function(done){
			db.getHash(name, function(hash){
				hash.should.be.a('object');
				hash.key.should.equal('value');
				// @todo - should ninjazord automatically parse numbers?
				hash.keyTwo.should.equal('0');
				done();
			});
		});
		it('getHash With Key', function(done){
			db.getHash(name, 'key', function(res){
				res.should.equal('value');
				done();
			});
		});
		it('hashExists', function(done){
			db.hashExists(name,function(exists){
				exists.should.equal(true);
				db.hashExists('garbageNonexistentHash',function(exists){
					exists.should.equal(false);
					done();
				});
			});
		});
		it('hashExists With Key', function(done){
			db.hashExists(name, 'key',function(exists){
				exists.should.equal(true);
				db.hashExists('garbageNonexistentHash', 'key',function(exists){
					exists.should.equal(false);
					done();
				});
			});
		});
		it('hashDelete With Key', function(done){
			db.hashDelete(name,'key',function(res){
				res.should.equal(true);
				db.getHash(name, 'key', function(res){
					should.not.exist(res);
					done();
				});
			});
		});
		it('hashDelete', function(done){
			db.hashDelete(name, function (res){
				res.should.equal(true);
				db.getHash(name, function(res){
					res.should.equal(false);
					done();
				});
			});
		});
	});

	describe('Set Methods', function(){
		it('setAdd', function(done){
			db.setAdd('testSet', 5, function(res){
				res.should.equal(true);
				done();
			});
		});
		it('setRemove', function(done){
			db.setAdd('testSet', 7, function(res){
				res.should.equal(true);
				db.setRemove('testSet', 7, function(res){
					res.should.equal(true);
					done();
				});
			});
		});
		it('setMembers', function(done){
			db.setMembers('testSet', function(members){
				members.length.should.equal(1);
				members[0].should.equal('5');
				done();
			});
		});
		it('setLength', function(done){
			db.setLength('testSet', function(length){
				length.should.equal(1);
				done();
			});
		});
		it('setIsMember', function(done){
			db.setIsMember('testSet', 5, function(isMember){
				isMember.should.equal(true);
				done();
			});
		});
	});

	describe('Sorted Set Methods', function(){
		it('sortedSetAdd', function(done){
			db.sortedSetAdd('testSortedSet', 1, 'one', function(res){
				res.should.equal(true);
				done();
			});
		});
		it('sortedSetRemove', function(done){
			db.sortedSetAdd('testSortedSet', 2, 'two', function(res){
				res.should.equal(true);
				db.sortedSetRemove('testSortedSet','two', function(res){
					res.should.equal(true);
					done();
				});
			});
		});
		it('sortedSetRange', function(done){
			db.sortedSetAdd('testSortedSet', 3, 'three', function(res){
				res.should.equal(true);
				db.sortedSetRange('testSortedSet', 0 , -1, function(set){
					set.length.should.equal(2);
					set[0].should.equal('one');
					set[1].should.equal('three');
					done();
				});
			});
		});
		it('sortedSetRange with scores', function(done){
			db.sortedSetAdd('testSortedSet', 4, 'four', function(res){
				res.should.equal(true);
				db.sortedSetRange('testSortedSet', 0 , -1, true, function(set){
					set.length.should.equal(3 * 2);
					done();
				});
			});
		});
		it('sortedSetLength', function(done){
			db.sortedSetLength('testSortedSet', function (length) {
				length.should.equal(3);
				done();
			});
		});
	});

	describe('Objects', function(){
		it('createObject', function(done){
			db.createObject('testObject',{
				kick : 'ass',
				take : 'names',
				special : 5,
				sleven : 'APPLES'
			}, function(res){
				res.should.be.a('object');
				done();
			});
		});
		it('readObject', function(done){
			db.readObject('testObject', 1, function(object){
				object.id.should.equal(1);
				object.should.be.a('object');
				object.kick.should.equal('ass');
				object.created.should.be.a('string');
				object.updated.should.a('string');
				done();
			});
		});
		it('updateObject', function(done){
			db.updateObject('testObject', 1, {
				kick : 'tail'
			}, function(res){
				res.should.equal(true);
				db.readObject('testObject', 1, function(object){
					object.kick.should.equal('tail');
					// object.updated.should.not.equal(object.created);
					done();
				});
			});
		});
		it('objectExists', function(done) {
			db.objectExists('testObject', 1, function(res){
				res.should.equal(true);
				done();
			});
		});
		it('deleteObject', function(done){
			db.deleteObject('testObject', 1, function(res){
				res.should.equal(true);
				db.readObject('testObject', 1, function(res){
					res.should.equal(false);
					done();
				});
			});
		});

		it('createObjectWithExternalId', function(done){
			db.createObjectWithExternalId('testExternalIdObject', 5, {
				kick : 'ass'
			}, function(object){
				object.id.should.equal(5);
				done();
			})
		})
	});

});